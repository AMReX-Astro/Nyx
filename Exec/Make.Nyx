EBASE     ?= Nyx

ifeq ($(USE_GRAV), TRUE)
USE_PARTICLES = TRUE
else
USE_PARTICLES = FALSE
endif

BL_NO_FORT = TRUE

include $(AMREX_HOME)/Tools/GNUMake/Make.defs

NYX           = TRUE

# Nyx now uses a coarse grained OMP approach
DEFINES += -DCRSEGRNDOMP

ifeq ($(USE_SINGLE_PRECISION_PARTICLES), TRUE)
  DEFINES += -DBL_SINGLE_PRECISION_PARTICLES
endif

HENSON_INCLUDE_DIR ?= $(HOME)/Research/Sensei/henson-chai/include
HENSON_LIBRARY_DIR ?= $(HOME)/Build/Sensei/henson-chai
HENSON_LIBRARY ?= -L$(HENSON_LIBRARY_DIR) -lhenson
HENSON_LIBPMPI ?= -L$(HENSON_LIBRARY_DIR) -lhenson-pmpi -Wl,-rpath $(HENSON_LIBRARY_DIR)
ifeq ($(USE_HENSON), TRUE)
  DEFINES += -DHENSON
  FFLAGS += -fPIC
  F90FLAGS += -fPIC
  CXXFLAGS += -fPIC
  CFLAGS += -fPIC
  LDFLAGS += -shared -Wl,--export-dynamic -Wl,-u,henson_set_contexts,-u,henson_set_namemap
  INCLUDE_LOCATIONS += $(HENSON_INCLUDE_DIR)
  LIBRARIES += $(HENSON_LIBRARY) $(HENSON_LIBPMPI)
endif

ifeq ($(USE_CUDA), TRUE)
      F90FLAGS := $(subst -gopt, ,$(F90FLAGS))
endif

ifeq ($(USE_GRAV), TRUE)
  DEFINES += -DGRAVITY
endif

ifeq ($(NO_HYDRO), TRUE)
  DEFINES += -DNO_HYDRO
else

ifeq ($(USE_HEATCOOL), TRUE)
  DEFINES += -DHEATCOOL
endif

endif

ifeq ($(USE_CONST_SPECIES), TRUE)
  DEFINES += -DCONST_SPECIES
endif

ifeq ($(USE_AGN), TRUE)
  DEFINES += -DAGN
endif

ifeq ($(NEUTRINO_PARTICLES), TRUE)
  DEFINES += -DNEUTRINO_PARTICLES
endif

ifeq ($(NEUTRINO_DARK_PARTICLES), TRUE)
  DEFINES += -DNEUTRINO_DARK_PARTICLES
endif

ifeq ($(USE_SDC), TRUE)
  DEFINES += -DSDC
endif

ifeq ($(USE_FORCING), TRUE)
  DEFINES += -DFORCING
endif

GIMLET_DIR ?= /home/vince/Development/gimlet
# Gimlet needs FFTW MPI.
FFTW_INC ?= /usr/include
FFTW_DIR ?= /usr/lib/x86_64-linux-gnu

ifeq ($(DEBUG), TRUE)
  DEFINES += -DDEBUG
endif

ifeq ($(GIMLET), TRUE)

  ifneq ($(USE_OMP), TRUE)
    $(error Gimlet requires compiling with OpenMP)
  endif

  ifneq ($(USE_MPI), TRUE)
    $(error Gimlet requires compiling with MPI)
  endif

  DEFINES += -DGIMLET
  INCLUDE_LOCATIONS += $(GIMLET_DIR)
  VPATH_LOCATIONS += $(GIMLET_DIR)
  INCLUDE_LOCATIONS += $(FFTW_INC)
  LIBRARIES += -L$(FFTW_DIR) -lfftw3_mpi -lfftw3_omp -lfftw3

endif


ifeq ($(USE_SUNDIALS),TRUE)
SUNDIALS_ROOT ?= $(TOP)/../sundials/instdir
SUNDIALS_LIB_DIR ?= $(SUNDIALS_ROOT)/lib

USE_CVODE_LIBS ?= TRUE
USE_ARKODE_LIBS ?= TRUE

CPPFLAGS += -DAMREX_USE_SUNDIALS
INCLUDE_LOCATIONS += $(SUNDIALS_ROOT)/include

ifeq ($(USE_CVODE_LIBS),TRUE)
  LIBRARIES += -L$(SUNDIALS_LIB_DIR) -lsundials_cvode
endif

ifeq ($(USE_ARKODE_LIBS),TRUE)
  LIBRARIES += -L$(SUNDIALS_LIB_DIR) -lsundials_arkode
endif

LIBRARIES += -L$(SUNDIALS_LIB_DIR) -lsundials_nvecserial

ifeq ($(USE_CUDA),TRUE)
  LIBRARIES += -L$(SUNDIALS_LIB_DIR) -lsundials_nveccuda
endif

ifeq ($(USE_OMP),TRUE)
  LIBRARIES += -L$(SUNDIALS_LIB_DIR) -lsundials_nvecopenmp
endif

ifeq ($(USE_FUSED),TRUE)
ifeq ($(USE_CUDA),TRUE)
     LIBRARIES += -L$(SUNDIALS_LIB_DIR) -lsundials_cvode_fused_cuda
else
     LIBRARIES += -L$(SUNDIALS_LIB_DIR) -lsundials_cvode_fused_stubs
endif
endif

LIBRARIES += -Wl,-rpath,${SUNDIALS_LIB_DIR}
endif

#These are the directories in Nyx 

Bdirs   := Source/Driver Source/TimeStep Source/Hydro
Bdirs   += Source/EOS Source/HeatCool Source/IO Source/Initialization
Bdirs   += Source/DerivedQuantities
ifeq ($(USE_GRAV), TRUE)
Bdirs   += Source/Particle
endif

ifeq ($(USE_MPI), TRUE)
Bdirs 	+= Source/Monitors
endif

ifeq ($(USE_GRAV), TRUE)
   Bdirs 	+= Source/Gravity
endif
ifeq ($(USE_FORCING), TRUE)
   Bdirs 	+= Source/Forcing
endif
#ifeq ($(USE_AGN), TRUE)
   Bdirs 	+= Source/AGN
#endif

Bpack	+= $(foreach dir, $(Bdirs), $(TOP)/$(dir)/Make.package)
Blocs	+= $(foreach dir, $(Bdirs), $(TOP)/$(dir))

include $(Bpack)
INCLUDE_LOCATIONS += $(Blocs)
VPATH_LOCATIONS   += $(Blocs)

#These are the directories in AMReX
Pdirs   := Base AmrCore Amr Boundary

ifeq ($(USE_GRAV), TRUE)
Pdirs   += Particle
endif

ifeq ($(USE_SENSEI_INSITU),TRUE)
    Pdirs += Extern/SENSEI
endif
Ppack	+= $(foreach dir, $(Pdirs), $(AMREX_HOME)/Src/$(dir)/Make.package)
Plocs	+= $(foreach dir, $(Pdirs), $(AMREX_HOME)/Src/$(dir))

include $(Ppack)
INCLUDE_LOCATIONS += $(Plocs)
VPATH_LOCATIONS   += $(Plocs)

USE_MG = FALSE
ifeq ($(USE_GRAV), TRUE)
  USE_MG = TRUE
endif

ifeq ($(USE_MG), TRUE)
  include $(AMREX_HOME)/Src/LinearSolvers/MLMG/Make.package
  INCLUDE_LOCATIONS += $(AMREX_HOME)/Src/LinearSolvers/MLMG
  VPATH_LOCATIONS   += $(AMREX_HOME)/Src/LinearSolvers/MLMG
endif

ifeq ($(REEBER), TRUE)
     REEBER_NYX_HOME ?= $(TOP)/Util/reeber
     DIY_INCLUDE_DIR ?= ../../../diy/include
     REEBER_EXT_HOME ?= ../../../Reeber2
#     BOOST_INCLUDE_DIR ?= /usr/include/boost
     include $(REEBER_NYX_HOME)/Make.package
endif

all: $(executable) 
	$(SILENT) $(RM) AMReX_buildInfo.cpp
	@echo SUCCESS

# job_info support
CEXE_sources += AMReX_buildInfo.cpp
CEXE_headers += $(AMREX_HOME)/Tools/C_scripts/AMReX_buildInfo.H
INCLUDE_LOCATIONS +=  $(AMREX_HOME)/Tools/C_scripts

AMReX_buildInfo.cpp: 
	$(AMREX_HOME)/Tools/C_scripts/makebuildinfo_C.py \
          --amrex_home "$(AMREX_HOME)" \
          --COMP "$(COMP)" --COMP_VERSION "$(COMP_VERSION)" \
          --CXX_comp_name "$(CXX)" --CXX_flags "$(CXXFLAGS) $(CPPFLAGS) $(includes)" \
          --F_comp_name "$(F90)" --F_flags "$(F90FLAGS)" \
          --link_flags "$(LDFLAGS)" --libraries "$(libraries)" \
          --GIT "$(TOP) $(AMREX_HOME)"

vpath %.c   . $(VPATH_LOCATIONS)
vpath %.cpp . $(VPATH_LOCATIONS)
vpath %.h   . $(VPATH_LOCATIONS)
vpath %.H   . $(VPATH_LOCATIONS)
vpath %.F   . $(VPATH_LOCATIONS)
vpath %.f90 . $(VPATH_LOCATIONS)
vpath %.f   . $(VPATH_LOCATIONS)
vpath %.fi  . $(VPATH_LOCATIONS)

include $(AMREX_HOME)/Tools/GNUMake/Make.rules

clean::
	$(SILENT) $(RM) AMReX_buildInfo.cpp

